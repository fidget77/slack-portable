// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/Slack.lnk (1.872kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _slackLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x68\x2b\x55\x14\xc6\x7f\xb5\x15\x7d\x88\x92\x6a\x94\xf7\x44\x69\x90\x97\x87\x20\x33\x2f\x33\x4d\xf2\x92\xa8\xd0\x92\x3f\xa6\x34\x8f\x86\x84\x40\xc0\x79\xe0\x75\x9c\x62\x48\xd2\x4c\x33\x2d\x4d\xea\x46\x10\x17\x16\x0b\x05\x17\x8a\x54\x5a\x44\x54\x14\x03\x82\x3b\xa5\x74\xe1\x5a\x0a\x56\x14\x5c\x68\x5b\x17\xd2\x0a\x2e\x5c\x5a\x50\xe6\x66\x92\xb4\xb1\xe0\xc6\x4d\xc1\xef\x72\xff\x9d\xfb\xdd\x73\xbe\x73\x93\x9c\xe4\x80\x11\xff\x5d\xb8\xd8\x95\x23\x99\x9f\xa6\x20\xe0\xda\x8f\xbf\x3d\x39\xaa\xee\x8f\x4c\xb5\xda\xa7\xee\xdc\xdb\xe3\xa1\xbf\xf0\xf0\x23\x7e\x26\xf2\x3f\xcf\xed\x05\x8e\x13\x15\xdf\xfb\x3f\xdc\xcb\x53\xa1\xd0\x7b\xd7\xb8\x99\x4c\x18\xfc\x13\x79\x34\x39\x97\x6f\x7f\xd8\xf1\x51\xac\x09\xb3\xca\x33\x5c\x61\x8c\xdf\x77\xca\xb7\xdf\xed\xb8\x76\x15\x78\xe0\x61\x97\xf5\xea\x7d\x43\xd7\x77\x75\x8a\xd4\x10\x98\x54\x01\x3f\x06\xba\xe7\x6f\xb3\x13\xc0\x71\xfd\xa9\x56\xcb\x22\xd5\xf7\xb9\xd9\x71\xbb\xeb\xf3\xe4\xba\xcb\x7c\x63\x28\x83\xbf\xa6\xc7\x71\xfa\x3e\x55\x2c\x5a\x58\xc0\x55\x60\x06\x78\xcc\x4b\xda\x9d\x23\xde\x9d\x2c\x70\x0d\x18\x05\xa2\xcf\x1d\x8d\xf9\x80\x54\xe5\xfa\xe2\xb2\x15\x48\x92\x4c\x18\x32\x2f\x63\xa0\x86\xfb\xcf\xc8\x0e\x90\xc2\xc2\xa1\xca\x12\x0d\x6c\xae\xa2\xa2\x62\x9c\x1b\x07\x6c\xe3\x02\x71\x0f\x92\x24\x31\xc4\x12\xd8\xd8\x28\x4c\xa2\x7a\x3d\xe4\xb1\x4a\x38\x58\x34\x71\x30\x30\x69\x22\x58\xa5\x8d\xc1\xb4\xbc\x91\x42\xb0\x84\xc0\x20\x47\x03\x13\x41\xed\x5c\xcc\x81\xe7\x15\x2a\x2c\xa0\x11\x42\xa5\x82\x49\x03\xff\x28\xdc\x03\xdb\xc1\x52\x31\x5d\xc8\x17\xe6\x32\x33\xb9\x74\xd0\x98\xb6\xed\x94\x58\x12\x46\xae\x61\x8a\x5a\xf7\x11\x0c\x61\xdb\xca\x4a\x65\x41\x0b\xa9\x15\xb3\x71\xc1\xd7\xe2\xf2\x23\x48\x89\x22\x69\x0a\xe4\x29\x30\x47\x86\x19\x72\xa4\x09\xfe\x27\x2f\xfd\x3f\x2e\x0b\x5e\xe8\x96\x85\xed\xb2\xb7\x37\x9b\x62\xb5\xad\xd8\x66\xef\x7c\xd3\x79\xe2\xcf\xaf\x0f\xef\xcc\x7e\xf2\x76\xf4\xc6\xd3\xc7\xf9\x2d\xdf\x2f\x9f\xbe\x36\xfe\xfd\xaf\xe3\xaf\x6f\xa4\xd6\x9e\xaf\x7f\xf1\xdb\xbf\x9d\x6f\x8c\xc0\x15\xd8\x5e\x07\xb4\x62\xbe\x78\xb8\x56\xce\x7c\x95\x8b\x25\xbf\x3c\x7d\xe8\xad\x1b\xef\xd4\xbf\x59\x04\xc6\xdc\x40\x13\xc0\x4d\xa0\x88\x82\x86\x42\x04\x05\x5d\xae\x26\x65\x71\x88\x32\x49\x0c\x0d\x9d\x30\x3a\x0a\x61\x42\xb2\xc5\xe4\x49\x98\xa8\xe4\x6a\x84\x89\xa1\x13\x23\x84\x2e\x5b\x5c\x5a\x5d\xa6\xd6\x4f\x7a\xc7\x13\x53\x7a\x32\xb7\xd5\xde\x8a\xcf\x7e\xbc\x77\xb0\xaf\x1c\x7c\xf7\xc7\x1d\xe0\xd1\x9e\x98\x20\x10\x47\x10\x47\xe7\x25\x04\x31\x6e\xc9\xb0\x71\xe6\xa5\x80\x08\x1a\x82\x30\x0a\x02\x9d\x17\xa5\xe0\x5b\x68\xc4\x08\xcb\x66\x31\x8f\x89\x46\x84\xb0\x0c\x9a\x06\xee\xee\x39\x77\xab\xb1\xfb\x43\xa9\xa3\xe2\xb0\xc8\x32\x15\x9a\x34\xb1\xa8\x49\xcb\xa0\x84\x3a\x67\xfe\x3f\xba\x88\x7b\xea\x3f\x7f\xa4\x9e\xfa\x6c\xdd\xce\x7e\x94\x9d\x52\x3f\x78\xb6\xf5\xe6\xe3\xc0\xcb\x78\xe5\x7e\xf4\x95\xd9\x6c\x97\x9e\x9f\x18\xfe\xcc\xff\x0e\x00\x00\xff\xff\x84\xa0\x15\x75\x50\x07\x00\x00")

func slackLnkBytes() ([]byte, error) {
	return bindataRead(
		_slackLnk,
		"Slack.lnk",
	)
}

func slackLnk() (*asset, error) {
	bytes, err := slackLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Slack.lnk", size: 1872, mode: os.FileMode(438), modTime: time.Unix(1540418005, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x14, 0xc1, 0x44, 0x74, 0x88, 0x13, 0x6a, 0xba, 0x72, 0x8a, 0xb1, 0x77, 0x24, 0x2, 0xcb, 0x2c, 0x8f, 0xc9, 0x47, 0x28, 0x2e, 0xa, 0xff, 0xe6, 0x7f, 0x48, 0x24, 0xfc, 0x38, 0x8d, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Slack.lnk": slackLnk,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Slack.lnk": &bintree{slackLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
