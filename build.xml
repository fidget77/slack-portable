<?xml version="1.0" encoding="UTF-8"?>
<project name="slack-portable" basedir=".">

  <dirname property="project.basedir" file="${ant.file.slack-portable}"/>
  <property name="build.properties" value="${project.basedir}/build.properties"/>
  <property file="${build.properties}"/>

  <macrodef name="sevenzip">
    <attribute name="src"/>
    <attribute name="dest"/>
    <attribute name="format" default="7z"/>
    <sequential>
      <if>
        <equals arg1="@{format}" arg2="7z"/>
        <then>
          <echo message="Compressing @{src} to @{dest}..."/>
          <exec executable="${7za}" failonerror="true">
            <arg value="a"/>
            <arg value="-t7z"/>
            <arg value="@{dest}"/>
            <arg value="@{src}"/>
            <arg value="-m0=LZMA2"/>
            <arg value="-mx9"/>
            <arg value="-mmt2"/>
          </exec>
        </then>
        <elseif>
          <equals arg1="@{format}" arg2="zip"/>
          <then>
            <echo message="Compressing @{src} to @{dest}..."/>
            <exec executable="${7za}" failonerror="true">
              <arg value="a"/>
              <arg value="-mm=Deflate"/>
              <arg value="-mfb=258"/>
              <arg value="-mpass=15"/>
              <arg value="-r"/>
              <arg value="@{dest}"/>
              <arg value="@{src}"/>
            </exec>
          </then>
        </elseif>
        <else>
          <fail message="Unknown format: @{format}"/>
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="unsevenzip">
    <attribute name="src"/>
    <attribute name="dest"/>
    <sequential>
      <echo message="Extracting @{src} to @{dest}..."/>
      <exec executable="${7za}" failonerror="true">
        <arg value="x"/>
        <arg value="@{src}"/>
        <arg value="-o@{dest}"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="goget">
    <attribute name="package"/>
    <sequential>
      <exec executable="go" failonerror="true">
        <env key="GOPATH" value="${gopath}"/>
        <arg value="get"/>
        <arg value="-v"/>
        <arg value="@{package}"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="gobuild">
    <attribute name="outputfile"/>
    <attribute name="workingdir"/>
    <sequential>
      <exec executable="go" failonerror="true" dir="@{workingdir}">
        <env key="GOPATH" value="${gopath}"/>
        <arg value="build"/>
        <arg value="-v"/>
        <arg value="-ldflags"/>
        <arg value="-s -w -H=windowsgui"/>
      </exec>
      <copy file="@{workingdir}/go.exe"
        tofile="@{outputfile}" overwrite="true"/>
    </sequential>
  </macrodef>

  <macrodef name="gogenerate">
    <attribute name="workingdir"/>
    <sequential>
      <exec executable="go" failonerror="true" dir="@{workingdir}">
        <env key="GOPATH" value="${gopath}"/>
        <arg value="generate"/>
        <arg value="-v"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="assertdir">
    <attribute name="dir"/>
    <sequential>
      <fail message="Directory '@{dir}' does not exist">
        <condition><not><available file="@{dir}" type="dir"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <macrodef name="assertfile">
    <attribute name="file"/>
    <sequential>
      <fail message="File '@{file}' does not exist">
        <condition><not><available file="@{file}" type="file"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <!-- Default excludes -->
  <defaultexcludes add="**/.github/**"/>
  <defaultexcludes add="**/.idea/**"/>
  <defaultexcludes add="**/.settings/**"/>
  <defaultexcludes add="**/.buildpath"/>
  <defaultexcludes add="**/.gitattributes"/>
  <defaultexcludes add="**/.gitignore"/>
  <defaultexcludes add="**/.gitkeep"/>
  <defaultexcludes add="**/.project"/>
  <defaultexcludes add="**/.project"/>
  <defaultexcludes add="**/.styleci.yml"/>
  <defaultexcludes add="**/.travis.yml"/>

  <!-- Properties -->
  <property environment="env"/>
  <property name="src.path" value="${project.basedir}/${src.dir}"/>
  <property name="static.path" value="${project.basedir}/${static.dir}"/>
  <property name="bin.path" value="${project.basedir}/${bin.dir}"/>
  <property name="res.path" value="${project.basedir}/${res.dir}"/>
  <property name="go.path" value="${bin.path}/go"/>
  <property name="build.path" value="${bin.path}/build"/>
  <property name="release.path" value="${bin.path}/release"/>
  <property name="lib.path" value="${bin.path}/lib"/>
  <property name="tmp.path" value="${bin.path}/tmp"/>
  <property name="extract.path" value="${tmp.path}/extract"/>
  <property name="nupkg.path" value="${tmp.path}/nupkg"/>
  <property name="slacksetup" value="${tmp.path}/SlackSetup.exe"/>
  <property name="7za" value="${lib.path}/7zipextra/7za.exe"/>

  <!-- Build number -->
  <condition property="app.release" value="${env.APPVEYOR_BUILD_NUMBER}"><isset property="env.APPVEYOR_BUILD_NUMBER"/></condition>
  <condition property="app.release" value="${app.default.release}"><not><isset property="env.APPVEYOR_BUILD_NUMBER"/></not></condition>

  <!-- Go path -->
  <condition property="gopath" value="${env.GOPATH};${project.basedir}"><isset property="env.GOPATH"/></condition>
  <condition property="gopath" value="${project.basedir}"><not><isset property="env.GOPATH"/></not></condition>

  <target name="release" depends="init, load.lib, slack.download, slack.process, infos, go.build, build" description="Release">
    <echo message="Writing version.dat..."/>
    <echo file="${tmp.path}/version.dat" append="false">${app.version}-${app.release}</echo>

    <echo message="Creating release..."/>
    <copy file="${go.path}/${app.id}.exe" todir="${release.path}" overwrite="true"/>
    <copy file="${slacksetup}" tofile="${release.path}/SlackSetup-${app.version}.exe" overwrite="true"/>
    <sevenzip src="${build.path}/*" dest="${release.path}/${app.id}-${app.version}-${app.release}.7z" format="7z"/>
    <sevenzip src="${build.path}/*" dest="${release.path}/${app.id}-${app.version}-${app.release}.zip" format="zip"/>
  </target>

  <target name="init" unless="is.lib.loaded">
    <mkdir dir="${bin.path}"/>
    <mkdir dir="${lib.path}"/>
    <mkdir dir="${tmp.path}"/>
    <delete dir="${build.path}"/>
    <mkdir dir="${build.path}"/>
    <delete dir="${extract.path}"/>
    <mkdir dir="${extract.path}"/>
    <delete dir="${nupkg.path}"/>
    <mkdir dir="${nupkg.path}"/>
    <delete dir="${release.path}"/>
    <mkdir dir="${release.path}"/>
    <delete dir="${go.path}"/>
  </target>

  <target name="load.lib" unless="is.lib.loaded" depends="load.lib.antcontrib, load.lib.sevenzip">
    <var name="is.lib.loaded" value="true"/>
  </target>

  <target name="load.lib.antcontrib" unless="is.lib.loaded">
    <echo message="Load ANT Contrib"/>
    <mkdir dir="${lib.path}/ant-contrib"/>
    <get dest="${lib.path}/ant-contrib/ant-contrib.jar" src="${antcontrib.url}" skipexisting="true"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <fileset dir="${lib.path}/ant-contrib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
  </target>

  <target name="load.lib.sevenzip" unless="is.lib.loaded">
    <echo message="Load 7zip"/>
    <get dest="${lib.path}/7zipextra.zip" src="${7zipextra.url}" skipexisting="true"/>
    <if>
      <not><available file="${lib.path}/7zipextra" type="dir"/></not>
      <then>
        <unzip src="${lib.path}/7zipextra.zip" dest="${lib.path}/7zipextra"/>
      </then>
    </if>
  </target>

  <target name="slack.download">
    <echo message="Downloading Slack..."/>
    <echo message="* URL     : ${slack.url}"/>
    <get dest="${slacksetup}" src="${slack.url}" skipexisting="true"/>
  </target>

  <target name="slack.process">
    <echo message="Processing ${slacksetup}..."/>
    <unsevenzip src="${slacksetup}" dest="${extract.path}"/>

    <first id="first.nupkg">
      <fileset dir="${extract.path}" includes="*.nupkg"/>
    </first>
    <condition property="slack.nupkg" value="${toString:first.nupkg}">
      <available file="${toString:first.nupkg}" type="file"/>
    </condition>
    <fail unless="slack.nupkg" message="Nupkg file not found"/>
    <echo message="Nupkg found : ${slack.nupkg}"/>

    <unsevenzip src="${slack.nupkg}" dest="${nupkg.path}"/>
    <condition property="slack.libpath" value="${nupkg.path}/lib/net45">
      <available file="${nupkg.path}/lib/net45/${slack.executionstub}" type="file"/>
    </condition>
    <fail unless="slack.libpath" message="Slack execution stub not found"/>

    <echo message="Metadata found:"/>
    <xmlproperty file="${nupkg.path}/slack.nuspec" collapseAttributes="true"/>
    <echo message="* ID      : ${package.metadata.id}"/>
    <echo message="* Title   : ${package.metadata.title}"/>
    <echo message="* Version : ${package.metadata.version}"/>
    <property name="app.version" value="${package.metadata.version}"/>
  </target>

  <target name="infos">
    <filterset id="filterset.app">
      <filter token="APP_ID" value="${app.id}"/>
      <filter token="APP_NAME" value="${app.name}"/>
      <filter token="APP_DESC" value="${app.desc}"/>
      <filter token="APP_VERSION" value="${app.version}"/>
      <filter token="APP_RELEASE" value="${app.release}"/>
      <filter token="APP_COPYRIGHT" value="${app.copyright}"/>
    </filterset>
    <echo message="APP_ID        : ${app.id}"/>
    <echo message="APP_NAME      : ${app.name}"/>
    <echo message="APP_DESC      : ${app.desc}"/>
    <echo message="APP_VERSION   : ${app.version}"/>
    <echo message="APP_RELEASE   : ${app.release}"/>
    <echo message="APP_COPYRIGHT : ${app.copyright}"/>
  </target>

  <target name="go.build">
    <copy todir="${go.path}">
      <fileset file="${project.basedir}/slack-portable.go"/>
      <fileset file="${project.basedir}/res/slack-portable.ico"/>
    </copy>
    <copy file="${project.basedir}/versioninfo.json" todir="${go.path}" overwrite="true">
      <filterset refid="filterset.app"/>
    </copy>
    <goget package="github.com/josephspurrier/goversioninfo/cmd/goversioninfo"/>
    <goget package="github.com/op/go-logging"/>
    <gogenerate workingdir="${go.path}"/>
    <gobuild outputfile="${go.path}/${app.id}.exe" workingdir="${go.path}"/>
    <assertfile file="${go.path}/${app.id}.exe"/>
  </target>

  <target name="build">
    <copy todir="${build.path}/app-${app.version}">
      <fileset dir="${slack.libpath}"  excludes="
        ${slack.executionstub}"
      />
    </copy>

    <!--mkdir dir="${build.path}/packages/SquirrelTemp"/>
    <copy file="${extract.path}/RELEASES" todir="${build.path}/packages" overwrite="true"/>
    <copy file="${slack.nupkg}" todir="${build.path}/packages" overwrite="true"/-->

    <copy file="${slack.libpath}/${slack.executionstub}" tofile="${build.path}/slack.exe" overwrite="true"/>
    <copy file="${project.basedir}/README.md" todir="${build.path}" overwrite="true"/>

    <copy file="${go.path}/${app.id}.exe" todir="${build.path}" overwrite="true"/>
    <copy todir="${build.path}" overwrite="true">
      <fileset dir="${static.path}" defaultexcludes="yes"/>
    </copy>
  </target>

</project>
