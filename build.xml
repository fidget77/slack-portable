<?xml version="1.0" encoding="UTF-8"?>
<project name="slack-portable" basedir=".">

  <dirname property="project.basedir" file="${ant.file.slack-portable}"/>
  <property name="build.properties" value="${project.basedir}\build.properties"/>
  <property file="${build.properties}"/>

  <macrodef name="sevenzip">
    <attribute name="src"/>
    <attribute name="dest"/>
    <attribute name="format" default="7z"/>
    <sequential>
      <if>
        <equals arg1="@{format}" arg2="7z"/>
        <then>
          <echo message="Compressing @{src} to @{dest}..."/>
          <exec executable="${7za}" failonerror="true">
            <arg value="a"/>
            <arg value="-t7z"/>
            <arg value="@{dest}"/>
            <arg value="@{src}"/>
            <arg value="-m0=LZMA2"/>
            <arg value="-mx9"/>
            <arg value="-mmt2"/>
          </exec>
        </then>
        <elseif>
          <equals arg1="@{format}" arg2="zip"/>
          <then>
            <echo message="Compressing @{src} to @{dest}..."/>
            <exec executable="${7za}" failonerror="true">
              <arg value="a"/>
              <arg value="-mm=Deflate"/>
              <arg value="-mfb=258"/>
              <arg value="-mpass=15"/>
              <arg value="-r"/>
              <arg value="@{dest}"/>
              <arg value="@{src}"/>
            </exec>
          </then>
        </elseif>
        <else>
          <fail message="Unknown format: @{format}"/>
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="unsevenzip">
    <attribute name="src"/>
    <attribute name="dest"/>
    <sequential>
      <echo message="Extracting @{src} to @{dest}..."/>
      <exec executable="${7za}" failonerror="true">
        <arg value="x"/>
        <arg value="@{src}"/>
        <arg value="-o@{dest}"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="glide">
    <attribute name="workingdir"/>
    <sequential>
      <exec executable="${glide}" failonerror="true" dir="@{workingdir}">
        <arg value="up"/>
        <arg value="-v"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="gobuild">
    <attribute name="outputfile"/>
    <attribute name="workingdir"/>
    <sequential>
      <exec executable="go" failonerror="true" dir="@{workingdir}">
        <arg value="build"/>
        <arg value="-o"/>
        <arg value="@{outputfile}"/>
        <arg value="-v"/>
        <arg value="-ldflags"/>
        <arg value="-s -w -H=windowsgui"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="gogenerate">
    <attribute name="workingdir"/>
    <sequential>
      <exec executable="go" failonerror="true" dir="@{workingdir}">
        <arg value="generate"/>
        <arg value="-v"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="setSetupUrl">
    <attribute name="version"/>
    <sequential>
      <if>
        <equals arg1="@{version}" arg2="latest"/>
        <then>
          <property name="slacksetup.url" value="${slacksetup.latest}"/>
          <property name="slacksetup.skip" value="false"/>
        </then>
        <else>
          <property file="${project.basedir}\setup.properties" prefix="setup"/>
          <property name="slacksetup.url" value="${setup.@{version}}" />
          <property name="slacksetup.skip" value="true"/>
        </else>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="assertdir">
    <attribute name="dir"/>
    <sequential>
      <fail message="Directory '@{dir}' does not exist">
        <condition><not><available file="@{dir}" type="dir"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <macrodef name="assertfile">
    <attribute name="file"/>
    <sequential>
      <fail message="File '@{file}' does not exist">
        <condition><not><available file="@{file}" type="file"/></not></condition>
      </fail>
    </sequential>
  </macrodef>

  <!-- Properties -->
  <property environment="env"/>
  <property name="bin.path" value="${project.basedir}\${bin.dir}"/>
  <property name="res.path" value="${project.basedir}\${res.dir}"/>
  <property name="build.path" value="${bin.path}\build"/>
  <property name="setup.path" location="${bin.path}\setup"/>
  <property name="release.path" value="${bin.path}\release"/>
  <property name="lib.path" value="${bin.path}\lib"/>
  <property name="tmp.path" value="${bin.path}\tmp"/>
  <property name="extract.path" value="${tmp.path}\extract"/>
  <property name="nupkg.path" value="${tmp.path}\nupkg"/>
  <property name="7za" value="${lib.path}\7zipextra\7za.exe"/>
  <property name="rcedit" value="${lib.path}\rcedit\rcedit.exe"/>
  <property name="innoextract" location="${lib.path}\innoextract\innoextract.exe"/>
  <property name="innosetup.path" location="${lib.path}\innosetup"/>
  <property name="iscc" location="${innosetup.path}\app\ISCC.exe"/>
  <property name="glide" value="${lib.path}\glide\windows-386\glide.exe"/>
  <property name="slacksetup.path" value="${tmp.path}\SlackSetup-${slacksetup.version}.exe"/>

  <!-- Build number -->
  <condition property="app.release" value="${env.APPVEYOR_BUILD_NUMBER}"><isset property="env.APPVEYOR_BUILD_NUMBER"/></condition>
  <condition property="app.release" value="${app.default.release}"><not><isset property="env.APPVEYOR_BUILD_NUMBER"/></not></condition>

  <target name="vendor" description="Install vendor">
    <glide workingdir="${project.basedir}"/>
  </target>

  <target name="release" depends="init, load.lib, slack.download, slack.process, infos, build" description="Release">
    <echo message="Writing version.dat..."/>
    <echo file="${tmp.path}/version.dat" append="false">${app.version}-${app.release}</echo>

    <echo message="Creating release..."/>
    <copy file="${project.basedir}/${app.id}.exe" todir="${release.path}" overwrite="true"/>
    <copy file="${slacksetup.path}" tofile="${release.path}\SlackSetup-${app.version}.exe" overwrite="true"/>
    <copy file="${slack.nupkg}" todir="${release.path}" overwrite="true"/>
    <sevenzip src="${build.path}/*" dest="${release.path}\${app.id}-${app.version}-${app.release}.7z" format="7z"/>
    <sevenzip src="${build.path}/*" dest="${release.path}\${app.id}-${app.version}-${app.release}.zip" format="zip"/>

    <echo message="Build setup"/>
    <copy todir="${setup.path}/src">
      <fileset dir="${build.path}"/>
    </copy>
    <copy todir="${setup.path}">
      <fileset dir="${res.path}">
        <include name="setup*"/>
      </fileset>
      <fileset dir="${project.basedir}">
        <include name="slack-portable.ico"/>
      </fileset>
    </copy>
    <copy file="${project.basedir}\LICENSE" tofile="${setup.path}\license.txt"/>
    <copy file="${res.path}/setup.iss" tofile="${setup.path}\setup.iss" overwrite="true">
      <filterset>
        <filter token="APP_ID" value="${app.id}"/>
        <filter token="APP_NAME" value="${app.name}"/>
        <filter token="APP_VERSION" value="${app.version}-${app.release}"/>
        <filter token="APP_URL" value="${app.url}"/>
      </filterset>
    </copy>
    <exec executable="${iscc}" dir="${setup.path}" failonerror="true">
      <arg value="/O${release.path}"/>
      <arg value="/F${app.id}-${app.version}-${app.release}-setup"/>
      <arg value="setup.iss"/>
    </exec>
  </target>

  <target name="init" unless="is.lib.loaded">
    <mkdir dir="${bin.path}"/>
    <mkdir dir="${lib.path}"/>
    <mkdir dir="${tmp.path}"/>
    <delete dir="${build.path}"/>
    <mkdir dir="${build.path}"/>
    <delete dir="${setup.path}"/>
    <mkdir dir="${setup.path}"/>
    <delete dir="${extract.path}"/>
    <mkdir dir="${extract.path}"/>
    <delete dir="${nupkg.path}"/>
    <mkdir dir="${nupkg.path}"/>
    <delete dir="${release.path}"/>
    <mkdir dir="${release.path}"/>
  </target>

  <target name="load.lib" unless="is.lib.loaded" depends="
      load.lib.antcontrib,
      load.lib.sevenzip,
      load.lib.rcedit,
      load.lib.innosetup,
      load.lib.glide">
    <var name="is.lib.loaded" value="true"/>
  </target>

  <target name="load.lib.antcontrib" unless="is.lib.loaded">
    <echo message="Load ANT Contrib"/>
    <mkdir dir="${lib.path}/ant-contrib"/>
    <get dest="${lib.path}/ant-contrib/ant-contrib.jar" src="${antcontrib.url}" skipexisting="true"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <fileset dir="${lib.path}/ant-contrib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
  </target>

  <target name="load.lib.sevenzip" unless="is.lib.loaded">
    <echo message="Load 7zip"/>
    <get dest="${lib.path}\7zipextra.zip" src="${7zipextra.url}" skipexisting="true"/>
    <if>
      <not><available file="${lib.path}\7zipextra" type="dir"/></not>
      <then>
        <unzip src="${lib.path}\7zipextra.zip" dest="${lib.path}/7zipextra"/>
      </then>
    </if>
  </target>

  <target name="load.lib.rcedit" unless="is.lib.loaded">
    <echo message="Load Rcedit"/>
    <mkdir dir="${lib.path}\rcedit"/>
    <get dest="${lib.path}\rcedit\rcedit.exe" src="${rcedit.url}" skipexisting="true"/>
  </target>

  <target name="load.lib.innoextract" unless="is.lib.loaded">
    <echo message="Load innoextract"/>
    <get dest="${lib.path}\innoextract.zip" src="${innoextract.url}" skipexisting="true"/>
    <if>
      <not><available file="${lib.path}\innoextract" type="dir"/></not>
      <then>
        <unzip src="${lib.path}\innoextract.zip" dest="${lib.path}\innoextract"/>
      </then>
    </if>
  </target>

  <target name="load.lib.innosetup" depends="load.lib.innoextract" unless="is.lib.loaded">
    <echo message="Load InnoSetup"/>
    <get dest="${lib.path}\innosetup.exe" src="${innosetup.url}" skipexisting="true"/>
    <if>
      <not><available file="${innosetup.path}\app" type="dir"/></not>
      <then>
        <exec executable="${innoextract}">
          <arg value="-d"/>
          <arg value="${innosetup.path}"/>
          <arg value="${lib.path}\innosetup.exe"/>
        </exec>
      </then>
    </if>
    <fail message="File ${iscc} not found">
      <condition>
        <not>
          <available file="${iscc}"/>
        </not>
      </condition>
    </fail>
  </target>

  <target name="load.lib.glide" unless="is.lib.loaded">
    <echo message="Load Glide"/>
    <get dest="${lib.path}\glide.zip" src="${glide.url}" skipexisting="true"/>
    <if>
      <not><available file="${lib.path}\glide" type="dir"/></not>
      <then>
        <unzip src="${lib.path}\glide.zip" dest="${lib.path}\glide"/>
      </then>
    </if>
    <fail message="File ${glide} not found">
      <condition>
        <not>
          <available file="${glide}"/>
        </not>
      </condition>
    </fail>
  </target>

  <target name="slack.download">
    <echo message="Downloading Slack..."/>
    <setSetupUrl version="${slacksetup.version}"/>
    <echo message="* Version : ${slacksetup.version}"/>
    <echo message="* URL     : ${slacksetup.url}"/>
    <get dest="${slacksetup.path}" src="${slacksetup.url}" skipexisting="${slacksetup.skip}"/>
  </target>

  <target name="slack.process">
    <echo message="Processing ${slacksetup.path}..."/>
    <unsevenzip src="${slacksetup.path}" dest="${extract.path}"/>

    <first id="first.nupkg">
      <fileset dir="${extract.path}" includes="*.nupkg"/>
    </first>
    <condition property="slack.nupkg" value="${toString:first.nupkg}">
      <available file="${toString:first.nupkg}" type="file"/>
    </condition>
    <fail unless="slack.nupkg" message="Nupkg file not found"/>
    <echo message="Nupkg found : ${slack.nupkg}"/>

    <unsevenzip src="${slack.nupkg}" dest="${nupkg.path}"/>
    <condition property="slack.libpath" value="${nupkg.path}/lib/net45">
      <available file="${nupkg.path}\lib\net45\${slack.executionstub}" type="file"/>
    </condition>
    <fail unless="slack.libpath" message="Slack execution stub not found"/>

    <echo message="Metadata found:"/>
    <xmlproperty file="${nupkg.path}\slack.nuspec" collapseAttributes="true"/>
    <echo message="* ID      : ${package.metadata.id}"/>
    <echo message="* Title   : ${package.metadata.title}"/>
    <echo message="* Version : ${package.metadata.version}"/>
    <property name="app.version" value="${package.metadata.version}"/>
  </target>

  <target name="infos">
    <filterset id="filterset.app">
      <filter token="APP_ID" value="${app.id}"/>
      <filter token="APP_NAME" value="${app.name}"/>
      <filter token="APP_DESC" value="${app.desc}"/>
      <filter token="APP_VERSION" value="${app.version}"/>
      <filter token="APP_RELEASE" value="${app.release}"/>
      <filter token="APP_COPYRIGHT" value="${app.url}"/>
    </filterset>
    <echo message="APP_ID        : ${app.id}"/>
    <echo message="APP_NAME      : ${app.name}"/>
    <echo message="APP_DESC      : ${app.desc}"/>
    <echo message="APP_VERSION   : ${app.version}"/>
    <echo message="APP_RELEASE   : ${app.release}"/>
    <echo message="APP_COPYRIGHT : ${app.url}"/>
  </target>

  <target name="build">
    <copy file="${res.path}\versioninfo.json" todir="${project.basedir}" overwrite="true">
      <filterset refid="filterset.app"/>
    </copy>
    <glide workingdir="${project.basedir}"/>
    <gogenerate workingdir="${project.basedir}"/>
    <gobuild outputfile="${project.basedir}\${app.id}.exe" workingdir="${project.basedir}"/>
    <assertfile file="${project.basedir}\${app.id}.exe"/>

    <copy todir="${build.path}\app-${app.version}">
      <fileset dir="${slack.libpath}"  excludes="${slack.executionstub}">
        <exclude name="${slack.executionstub}"/>
      </fileset>
    </copy>

    <copy todir="${build.path}" file="${extract.path}\Update.exe"/>
    <exec executable="${rcedit}" failonerror="true" dir="${build.path}">
      <arg value="${build.path}\Update.exe"/>
      <arg value="--set-icon"/>
      <arg value="${res.path}\slack.ico"/>
    </exec>

    <copy file="${slack.libpath}\${slack.executionstub}" tofile="${build.path}\slack.exe" overwrite="true"/>
    <copy file="${project.basedir}\README.md" todir="${build.path}" overwrite="true"/>

    <copy file="${project.basedir}\${app.id}.exe" todir="${build.path}" overwrite="true"/>
    <copy file="${res.path}\slack.ico" tofile="${build.path}\app.ico" overwrite="true"/>
    <copy file="${res.path}\slack-win10.ico" tofile="${build.path}\app-win10.ico" overwrite="true"/>
  </target>

</project>
